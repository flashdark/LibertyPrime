!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACCEL_X	.\include\API.h	56;"	d
ACCEL_Y	.\include\API.h	60;"	d
AFLAGS	.\common.mk	/^AFLAGS:=$(MCUAFLAGS)$/;"	m
API_H_	.\include\API.h	22;"	d
AR	.\common.mk	/^AR:=$(MCUPREFIX)ar$/;"	m
ARFLAGS	.\common.mk	/^ARFLAGS:=$(MCUCFLAGS)$/;"	m
ARM_DEPLOY_POWER	.\src\auton8.c	6;"	d	file:
ARM_ENCODER_BOTTOM	.\include\robot.h	21;"	d
ARM_ENCODER_TOP	.\include\robot.h	20;"	d
ARM_HOLD_POWER	.\src\auton8.c	5;"	d	file:
ARM_MOTOR	.\include\robot.h	40;"	d
ARM_PICKUP	.\include\robot.h	91;"	d
ARM_POT	.\include\robot.h	9;"	d
ARM_PRESTACK	.\include\robot.h	92;"	d
ARM_RETRACT_POWER	.\src\auton8.c	7;"	d	file:
ARM_STACK	.\include\robot.h	90;"	d
ARM_STOWED	.\include\robot.h	89;"	d
AS	.\common.mk	/^AS:=$(MCUPREFIX)as$/;"	m
ASMEXT	.\common.mk	/^ASMEXT=s$/;"	m
AccelerateBackward	.\src\autolib.c	/^void AccelerateBackward(int power)\/\/gradually increase power to avoid sudden jerking or steering movements$/;"	f
AccelerateForward	.\src\autolib.c	/^void AccelerateForward(int power)\/\/gradually increase power to avoid sudden jerking or steering movements$/;"	f
ArmControl	.\src\drivertasks.c	/^void ArmControl()$/;"	f
BOARD_NR_ADC_PINS	.\include\API.h	141;"	d
BOARD_NR_GPIO_PINS	.\include\API.h	151;"	d
BTN5_LEFT_TRIGGER	.\include\robot.h	51;"	d
BTN6_RIGHT_TRIGGER	.\include\robot.h	52;"	d
BTN7_LEFT_THUMB	.\include\robot.h	53;"	d
BTN8_RIGHT_THUMB	.\include\robot.h	54;"	d
BTN_ARM	.\include\robot.h	64;"	d
BTN_ARM_DOWN	.\include\robot.h	66;"	d
BTN_ARM_UP	.\include\robot.h	65;"	d
BTN_CLAW_CLOSE	.\include\robot.h	68;"	d
BTN_CLAW_OPEN	.\include\robot.h	67;"	d
BTN_CONE	.\include\robot.h	73;"	d
BTN_CONE_IN	.\include\robot.h	74;"	d
BTN_CONE_OUT	.\include\robot.h	75;"	d
BTN_LIFT	.\include\robot.h	61;"	d
BTN_LIFT_DOWN	.\include\robot.h	63;"	d
BTN_LIFT_UP	.\include\robot.h	62;"	d
BTN_MGOAL	.\include\robot.h	69;"	d
BTN_MGOAL_AUTOSCORE	.\include\robot.h	72;"	d
BTN_MGOAL_DEPLOY	.\include\robot.h	71;"	d
BTN_MGOAL_RETRACT	.\include\robot.h	70;"	d
CC	.\common.mk	/^CC:=$(MCUPREFIX)gcc$/;"	m
CCFLAGS	.\common.mk	/^CCFLAGS:=-c -Wall $(MCUCFLAGS) -Os -ffunction-sections -fsigned-char -fomit-frame-pointer -fsingle-precision-constant$/;"	m
CEXT	.\common.mk	/^CEXT=c$/;"	m
CFLAGS	.\common.mk	/^CFLAGS:=$(CCFLAGS) -std=gnu99 -Werror=implicit-function-declaration$/;"	m
CLAW_CLOSE_POWER	.\include\config.h	2;"	d
CLAW_HOLD_POWER	.\include\config.h	3;"	d
CLAW_MOTOR	.\include\robot.h	41;"	d
CLAW_OPEN_POWER	.\include\config.h	1;"	d
CPPCC	.\common.mk	/^CPPCC:=$(MCUPREFIX)g++$/;"	m
CPPEXT	.\common.mk	/^CPPEXT=cpp$/;"	m
CPPFLAGS	.\common.mk	/^CPPFLAGS:=$(CCFLAGS) -fno-exceptions -fno-rtti -felide-constructors$/;"	m
DEVICE	.\common.mk	/^DEVICE=VexCortex$/;"	m
DriverControl	.\src\drivertasks.c	/^void DriverControl()$/;"	f
EOF	.\include\API.h	829;"	d
Encoder	.\include\API.h	/^typedef void * Encoder;$/;"	t
FILE	.\include\API.h	/^typedef int FILE;$/;"	t
Gyro	.\include\API.h	/^typedef void * Gyro;$/;"	t
HEXT	.\common.mk	/^HEXT=h$/;"	m
HIGH	.\include\API.h	157;"	d
HOLD_POWER_STATE	.\include\config.h	5;"	d
IME_ADDR_MAX	.\include\API.h	458;"	d
INCLUDE	.\common.mk	/^INCLUDE=-I$(ROOT)\/include -I$(ROOT)\/src$/;"	m
INPUT	.\include\API.h	172;"	d
INPUT_ANALOG	.\include\API.h	179;"	d
INPUT_FLOATING	.\include\API.h	186;"	d
INTAKE_PWR	.\src\auton8.c	10;"	d	file:
INTERRUPT_EDGE_BOTH	.\include\API.h	327;"	d
INTERRUPT_EDGE_FALLING	.\include\API.h	322;"	d
INTERRUPT_EDGE_RISING	.\include\API.h	318;"	d
IntakeControl	.\src\drivertasks.c	/^void IntakeControl() {$/;"	f
InterruptHandler	.\include\API.h	/^typedef void (*InterruptHandler)(unsigned char pin);$/;"	t
JOY_DOWN	.\include\API.h	40;"	d
JOY_LEFT	.\include\API.h	44;"	d
JOY_MASTER	.\include\robot.h	45;"	d
JOY_RIGHT	.\include\API.h	52;"	d
JOY_SLAVE	.\include\robot.h	46;"	d
JOY_UP	.\include\API.h	48;"	d
LCD_BTN_CENTER	.\include\API.h	1127;"	d
LCD_BTN_LEFT	.\include\API.h	1123;"	d
LCD_BTN_RIGHT	.\include\API.h	1131;"	d
LDFLAGS	.\common.mk	/^LDFLAGS:=-Wall $(MCUCFLAGS) $(MCULFLAGS) -Wl,--gc-sections$/;"	m
LEFT_DRIVE_ENCODER_BOTTOM	.\include\robot.h	15;"	d
LEFT_DRIVE_ENCODER_TOP	.\include\robot.h	14;"	d
LEFT_DRIVE_FRONT_MOTOR	.\include\robot.h	30;"	d
LEFT_DRIVE_REAR_MOTOR	.\include\robot.h	31;"	d
LEFT_DRIVE_REVERSED	.\include\robot.h	35;"	d
LIBRARIES	.\common.mk	/^LIBRARIES=$(wildcard $(ROOT)\/firmware\/*.a) -lgcc -lm$/;"	m
LIFT_ENCODER_BOTTOM	.\include\robot.h	19;"	d
LIFT_ENCODER_TOP	.\include\robot.h	18;"	d
LIFT_HIGH	.\src\auton8.c	4;"	d	file:
LIFT_HOLD_POWER	.\src\auton8.c	3;"	d	file:
LIFT_MOTOR	.\include\robot.h	42;"	d
LIFT_POWER	.\include\config.h	6;"	d
LOW	.\include\API.h	163;"	d
LeftDriveEncoder	.\include\robot.h	/^Encoder LeftDriveEncoder;$/;"	v
LiftControl	.\src\drivertasks.c	/^void LiftControl()$/;"	f
LiftEncoder	.\include\robot.h	/^Encoder LiftEncoder;$/;"	v
MAIN_H_	.\include\main.h	26;"	d
MAKE_COMMAND	.\common.mk	/^MAKE_COMMAND=make$/;"	m
MCUAFLAGS	.\common.mk	/^MCUAFLAGS=-mthumb -mcpu=cortex-m3 -mlittle-endian$/;"	m
MCUCFLAGS	.\common.mk	/^MCUCFLAGS=-mthumb -mcpu=cortex-m3 -mlittle-endian -mfloat-abi=soft$/;"	m
MCULFLAGS	.\common.mk	/^MCULFLAGS=-nostartfiles -Wl,-static -Bfirmware -Wl,-u,VectorTable -Wl,-T -Xlinker firmware\/cortex.ld$/;"	m
MCUPREFIX	.\common.mk	/^MCUPREFIX=arm-none-eabi-$/;"	m
MCUPREPARE	.\common.mk	/^MCUPREPARE=$(OBJCOPY) $(OUT) -O binary $(BINDIR)\/$(OUTBIN)$/;"	m
MOBILE_GOAL_HOLD_POWER	.\include\config.h	8;"	d
MOBILE_GOAL_MOTOR	.\include\robot.h	38;"	d
MOBILE_GOAL_POT	.\include\robot.h	7;"	d
MOBILE_GOAL_POWER	.\include\config.h	7;"	d
MobileGoalControl	.\src\drivertasks.c	/^void MobileGoalControl()$/;"	f
Mutex	.\include\API.h	/^typedef void * Mutex;$/;"	t
OBJCOPY	.\common.mk	/^OBJCOPY:=$(MCUPREFIX)objcopy$/;"	m
OK_TO_BRAKE	.\src\autontasks.c	3;"	d	file:
OPERATION_DISABLE	.\src\auton8.c	14;"	d	file:
OPERATION_HOLDPOWER	.\src\auton8.c	13;"	d	file:
OPERATION_INTAKECONE	.\src\auton8.c	11;"	d	file:
OPERATION_RELEASECONE	.\src\auton8.c	12;"	d	file:
OUTBIN	.\common.mk	/^OUTBIN=output.bin$/;"	m
OUTNAME	.\common.mk	/^OUTNAME=output.elf$/;"	m
OUTPUT	.\include\API.h	193;"	d
OUTPUT_OD	.\include\API.h	200;"	d
PWR_EXP_PORT	.\include\robot.h	8;"	d
RIGHT_DRIVE_ENCODER_BOTTOM	.\include\robot.h	17;"	d
RIGHT_DRIVE_ENCODER_TOP	.\include\robot.h	16;"	d
RIGHT_DRIVE_FRONT_MOTOR	.\include\robot.h	32;"	d
RIGHT_DRIVE_REAR_MOTOR	.\include\robot.h	33;"	d
RIGHT_DRIVE_REVERSED	.\include\robot.h	36;"	d
ROBOT_H	.\include\robot.h	3;"	d
RightDriveEncoder	.\include\robot.h	/^Encoder RightDriveEncoder;$/;"	v
SEEK_CUR	.\include\API.h	844;"	d
SEEK_END	.\include\API.h	851;"	d
SEEK_SET	.\include\API.h	837;"	d
SELECT_MODE_POT	.\include\robot.h	6;"	d
SERIAL_8N1	.\include\API.h	776;"	d
SERIAL_DATABITS_8	.\include\API.h	748;"	d
SERIAL_DATABITS_9	.\include\API.h	752;"	d
SERIAL_PARITY_EVEN	.\include\API.h	768;"	d
SERIAL_PARITY_NONE	.\include\API.h	764;"	d
SERIAL_PARITY_ODD	.\include\API.h	772;"	d
SERIAL_STOPBITS_1	.\include\API.h	756;"	d
SERIAL_STOPBITS_2	.\include\API.h	760;"	d
SIZEFLAGS	.\common.mk	/^SIZEFLAGS=$/;"	m
STACK_HEIGHT	.\src\auton8.c	9;"	d	file:
STACK_HEIGHT_INITIAL	.\src\auton8.c	8;"	d	file:
STICK_LEFT_DRIVE	.\include\robot.h	58;"	d
STICK_RIGHT_DRIVE	.\include\robot.h	57;"	d
STICK_THRESHOLD	.\include\robot.h	59;"	d
STK1_RIGHT_X	.\include\robot.h	47;"	d
STK2_RIGHT_Y	.\include\robot.h	48;"	d
STK3_LEFT_Y	.\include\robot.h	50;"	d
STK4_LEFT_X	.\include\robot.h	49;"	d
STRING_AUTON_1	.\include\robot.h	78;"	d
STRING_AUTON_2	.\include\robot.h	79;"	d
STRING_AUTON_3	.\include\robot.h	80;"	d
STRING_AUTON_4	.\include\robot.h	81;"	d
STRING_AUTON_5	.\include\robot.h	82;"	d
STRING_AUTON_6	.\include\robot.h	83;"	d
STRING_AUTON_7	.\include\robot.h	84;"	d
STRING_AUTON_8	.\include\robot.h	85;"	d
STRING_AUTON_9	.\include\robot.h	86;"	d
STRING_AUTON_A	.\include\robot.h	87;"	d
Semaphore	.\include\API.h	/^typedef void * Semaphore;$/;"	t
TASK_DEAD	.\include\API.h	1258;"	d
TASK_DEFAULT_STACK_SIZE	.\include\API.h	1245;"	d
TASK_MAX	.\include\API.h	1215;"	d
TASK_MAX_PRIORITIES	.\include\API.h	1221;"	d
TASK_MINIMAL_STACK_SIZE	.\include\API.h	1253;"	d
TASK_PRIORITY_DEFAULT	.\include\API.h	1232;"	d
TASK_PRIORITY_HIGHEST	.\include\API.h	1237;"	d
TASK_PRIORITY_LOWEST	.\include\API.h	1226;"	d
TASK_RUNNABLE	.\include\API.h	1267;"	d
TASK_RUNNING	.\include\API.h	1262;"	d
TASK_SLEEPING	.\include\API.h	1272;"	d
TASK_SUSPENDED	.\include\API.h	1276;"	d
TaskCode	.\include\API.h	/^typedef void (*TaskCode)(void *);$/;"	t
TaskHandle	.\include\API.h	/^typedef void * TaskHandle;$/;"	t
TaskManager	.\src\robotlib.c	/^void TaskManager(TaskHandle th,int operation)\/\/manages tasks$/;"	f
UPLOAD	.\common.mk	/^UPLOAD=@java -jar firmware\/uniflash.jar vex $(BINDIR)\/$(OUTBIN)$/;"	m
USER_CONTROL_STATE	.\include\config.h	4;"	d
Ultrasonic	.\include\API.h	/^typedef void * Ultrasonic;$/;"	t
ait	.\src\init.c	/^TaskHandle ait;$/;"	v
amgt	.\src\init.c	/^TaskHandle amgt;$/;"	v
amp	.\src\auto.c	/^int amp = 0;\/\/power to use to move arm$/;"	v
armbackward	.\src\opcontrol.c	/^bool armbackward = false;$/;"	v
armdist	.\src\auto.c	/^int armdist = 0;\/\/dist to move arm$/;"	v
armdown	.\src\opcontrol.c	/^bool armdown = false;$/;"	v
armforward	.\src\opcontrol.c	/^bool armforward = false;$/;"	v
armup	.\src\opcontrol.c	/^bool armup = false;$/;"	v
at	.\src\init.c	/^TaskHandle at;$/;"	v
autoMobileGoal	.\src\autontasks.c	/^void autoMobileGoal()$/;"	f
auton1	.\src\auton1.c	/^void auton1()$/;"	f
auton2	.\src\auton2.c	/^void auton2()$/;"	f
auton3	.\src\auton3.c	/^void auton3()$/;"	f
auton4	.\src\auton4.c	/^void auton4()$/;"	f
auton5	.\src\auton5.c	/^void auton5()$/;"	f
auton6	.\src\auton6.c	/^void auton6()$/;"	f
auton7	.\src\auton7.c	/^void auton7()$/;"	f
auton8	.\src\auton8.c	/^void auton8()$/;"	f
auton9	.\src\auton9.c	/^void auton9()$/;"	f
autonA	.\src\autonA.c	/^void autonA()$/;"	f
autonomous	.\src\auto.c	/^void autonomous() {$/;"	f
buf	.\src\opcontrol.c	/^char buf[16];$/;"	v
dbackward	.\src\opcontrol.c	/^bool dbackward = false;$/;"	v
dbgmenu	.\src\init.c	/^TaskHandle dbgmenu;$/;"	v
decelerate	.\src\autontasks.c	/^void decelerate(int counts)\/\/decelerate for accuracy$/;"	f
decelerateBack	.\src\autontasks.c	/^void decelerateBack(int counts)\/\/logic is flipped for going opposite way$/;"	f
dforward	.\src\opcontrol.c	/^bool dforward = false;$/;"	v
dgoal	.\src\opcontrol.c	/^bool dgoal = false;$/;"	v
displayRobotStatus	.\src\auto.c	/^void displayRobotStatus() {$/;"	f
dmp	.\src\auto.c	/^int dmp = 0;\/\/drive motor power$/;"	v
driveBackward	.\src\autolib.c	/^void driveBackward(int counts, int power)\/\/drive back to specified counts with specified power$/;"	f
drivedone	.\src\auto.c	/^bool volatile drivedone = false;$/;"	v
driveforward	.\src\autolib.c	/^void driveforward(int counts, int power,int mode)\/\/drive forward to specified counts with specified power$/;"	f
drivestraight	.\src\autolib.c	/^void drivestraight(int dmp)\/\/add or subtract power to stay on course when driving long distances$/;"	f
drivestraightBack	.\src\autolib.c	/^  void drivestraightBack(int dmp)\/\/add or subtract power to stay on course when driving long distances but with the logic flipped since we are going backwards$/;"	f
dt	.\src\init.c	/^TaskHandle dt;$/;"	v
g_selectedAutonomous	.\src\auto.c	/^unsigned g_selectedAutonomous = 0;$/;"	v
getAutonMode	.\src\auto.c	/^void getAutonMode() {$/;"	f
getSpeed	.\src\autontasks.c	/^void getSpeed()\/\/get speed the robot is traveling at$/;"	f
grab	.\src\opcontrol.c	/^bool grab = false;$/;"	v
incone	.\src\opcontrol.c	/^bool incone = false;$/;"	v
initialize	.\src\init.c	/^void initialize() {$/;"	f
initializeIO	.\src\init.c	/^void initializeIO() {$/;"	f
initializeLoopTasks	.\src\robotlib.c	/^void initializeLoopTasks() \/\/initalize auton tasks$/;"	f
intake	.\src\autontasks.c	/^void intake()$/;"	f
intpwr	.\src\auto.c	/^int volatile intpwr = 0;$/;"	v
it	.\src\init.c	/^TaskHandle it;$/;"	v
liftdist	.\src\auto.c	/^int liftdist = 0;\/\/how far to lift$/;"	v
liftdown	.\src\opcontrol.c	/^bool liftdown = false;$/;"	v
liftup	.\src\opcontrol.c	/^bool liftup = false;$/;"	v
lmp	.\src\auto.c	/^int lmp = 0; \/\/power to use when lifting$/;"	v
lt	.\src\init.c	/^TaskHandle lt;$/;"	v
mat	.\src\init.c	/^TaskHandle mat;$/;"	v
mgs	.\src\auto.c	/^int mgs = 0;\/\/mobile goal task state$/;"	v
mgt	.\src\init.c	/^TaskHandle mgt;$/;"	v
mlt	.\src\init.c	/^TaskHandle mlt;$/;"	v
mobilegoalpos	.\src\drivertasks.c	/^volatile int mobilegoalpos = 0;$/;"	v
motorLeftDriveSet	.\src\driverlib.c	/^void motorLeftDriveSet(int power)\/\/chains motors together$/;"	f
motorRightDriveSet	.\src\driverlib.c	/^void motorRightDriveSet(int power) \/\/chains motors together$/;"	f
movearm	.\src\autontasks.c	/^void movearm()$/;"	f
movelift	.\src\autontasks.c	/^void movelift()$/;"	f
mp	.\src\opcontrol.c	/^int mp = 0;$/;"	v
operation	.\src\auto.c	/^int volatile operation = 0;$/;"	v
operatorControl	.\src\opcontrol.c	/^void operatorControl() {$/;"	f
powerLeft	.\src\opcontrol.c	/^int powerLeft = 0;$/;"	v
powerRight	.\src\opcontrol.c	/^int powerRight = 0;$/;"	v
readButtons	.\src\driverlib.c	/^void readButtons()$/;"	f
readmgs	.\src\auto.c	/^int readmgs()\/\/read mobile goal state$/;"	f
relcone	.\src\opcontrol.c	/^bool relcone = false;$/;"	v
release	.\src\opcontrol.c	/^bool release = false;$/;"	v
rgoal	.\src\opcontrol.c	/^bool rgoal = false;$/;"	v
sgoal	.\src\opcontrol.c	/^bool sgoal = false;$/;"	v
shiftpressed	.\src\opcontrol.c	/^bool shiftpressed = false;$/;"	v
spd	.\src\init.c	/^TaskHandle spd;$/;"	v
speed	.\src\autontasks.c	/^int speed = 0;$/;"	v
status	.\src\autontasks.c	/^int status = 0;$/;"	v
stdin	.\include\API.h	815;"	d
stdout	.\include\API.h	811;"	d
turnCclwise	.\src\autolib.c	/^void turnCclwise(int counts)\/\/turn robot counter-clockwise to specified number of counts$/;"	f
turnClockwise	.\src\autolib.c	/^  void turnClockwise(int counts)\/\/turn robot clockwise to specified number of counts$/;"	f
uart1	.\include\API.h	819;"	d
uart2	.\include\API.h	823;"	d
writemgs	.\src\auto.c	/^void writemgs(int op)\/\/update mobile goal state$/;"	f
